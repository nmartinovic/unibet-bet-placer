Directory structure:
└── unibet-bet-placer/
    ├── README.md
    ├── pyproject.toml
    ├── techspec.md
    └── app/
        ├── __init__.py
        ├── api.py
        ├── asgi.py
        ├── bet_placer.py
        ├── browser.py
        ├── main.py
        ├── models.py
        └── __pycache__/

================================================
File: README.md
================================================



================================================
File: pyproject.toml
================================================
[tool.poetry]
name = "unibet-bet-placer"
version = "0.1.0"
description = ""
authors = ["Nick Martinovic <n.martinovic@criteo.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
playwright = "^1.52.0"
python-dotenv = "^1.1.0"
fastapi = "^0.115.12"
pydantic = "^2.11.4"
uvicorn = "^0.34.2"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
start-api = "app.api:app"



================================================
File: techspec.md
================================================
## 📋 Technical Specification: Unibet Horse Racing Bet Automation

### 🌟 Project Goal
Automate the placement of horse racing bets on [unibet.fr](https://www.unibet.fr/) using Playwright. The script:
- Accepts a race URL and list of bets
- Logs in using secure credentials
- Navigates to the race page
- Places each bet by selecting Gagnant or Place, entering stake, confirming
- Supports multiple bets per race with delay between each
- Will eventually run on Railway as a containerized scheduled app

---

### ✅ What’s Done

#### 🔒 Login Flow
- Navigates to race URL directly
- Accepts cookie banner
- Fills and submits login modal (email, password, birthdate)
- Handles visibility issues and retries on modal state

#### 🐎 Bet Placement Flow
- Clicks “Simple” bet mode once per race
- Locates correct horse via `.runner .number`
- Selects either Gagnant or Place icon (based on input)
- Enters amount into visible input
- Clicks “Parier” and then “Confirmer”
- Adds a pause between bets for UI reset
- Logs each successful bet

#### ⚙️ Tooling & Architecture
- FastAPI debug server (already present)
- Scraper scheduler in place
- Railway-ready Docker setup
- Project tracked in Git with clean file structure

---

### 🛠 What’s Next

| Feature                      | Status   |
|------------------------------|----------|
| Error handling (odds changed, bet rejected) | ⏳ In progress |
| Log bets to SQLite or .csv   | ⏳ Planned |
| Accept external JSON input   | ⏳ Planned |
| Add support for combo bets   | ⏳ Future |
| Trigger via FastAPI or CLI   | ⏳ Future |
| Deploy to Railway            | ⏳ Future |

---

### 📂 File Structure

```
nmartinovic-horse-bets/
├── app/
│   ├── main.py              # Entrypoint for betting
│   ├── bet_placer.py        # Logic to select/check horse and place bet
│   ├── browser.py           # Login automation logic
├── scraper/                 # Original scraping engine
├── data/                    # (Runtime) SQLite DB mount for Railway
├── pyproject.toml
├── Dockerfile
└── railway.toml
```

---

### 📄 Sample Input Format

```python
bets = [
    {"horse_number": 9, "bet_type": "gagnant", "amount": 2.0},
    {"horse_number": 9, "bet_type": "place",   "amount": 1.0}
]
```

---

### 🔁 Script Flow

1. Launch browser (headless optional)
2. Login using credentials in `.env`
3. Navigate to given race page
4. Click “Simple”
5. For each bet:
   - Locate runner box by horse number
   - Click Gagnant or Place icon
   - Input stake amount
   - Submit and confirm bet
   - Wait 3 seconds
6. Close browser

---

### 🛡️ Error Handling Plan (Next Iteration)

| Case                             | Plan                                  |
|----------------------------------|---------------------------------------|
| Element not found (DOM shift)    | Screenshot + fail gracefully          |
| Bet rejected (odds changed)      | Log to file and skip next bet         |
| Login fails                      | Abort run or retry once               |
| Stake entry fails                | Retry once after delay                |

---

### 🧪 Dev Tips

- Use `page.pause()` for manual debugging
- Use `get_by_role()` or robust locators with `.scroll_into_view_if_needed()`
- Watch for false negatives: hidden elements ≠ missing

---

### ✅ Local Run

```bash
$env:PYTHONPATH = "."
poetry run python app/main.py
```

---

Ready for Railway deployment, logging, or trigger enhancements when you are.


================================================
File: app/__init__.py
================================================



================================================
File: app/api.py
================================================
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Optional
import asyncio
from app.browser import launch_browser
from app.bet_placer import place_bet
from dotenv import load_dotenv
load_dotenv()


app = FastAPI()

class Recommendation(BaseModel):
    horse_number: int
    horse_name: str
    bet_type: str  # 'win', 'place', 'deuzio', 'boulet'
    bet_amount: float
    race_id: str

class Summary(BaseModel):
    total_bets: int
    total_bet_amount: float
    win_bets: int
    place_bets: int
    deuzio_bets: int
    boulot_bets: Optional[int] = 0 # ← Add this line
    timestamp: str

class BetRequest(BaseModel):
    race_url: str
    recommendations: List[Recommendation]
    summary: Summary

@app.post("/place-bets")
async def place_bets(request: BetRequest):
    try:
        browser, context, page = await launch_browser(headless=False, login=True)
        await page.goto(request.race_url, timeout=60000)

        for rec in request.recommendations:
            await place_bet(
                page=page,
                horse_number=rec.horse_number,
                bet_type=rec.bet_type,
                amount=rec.bet_amount
            )

        await browser.close()
        return {"status": "success", "message": f"{len(request.recommendations)} bets placed"}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))




================================================
File: app/asgi.py
================================================
from app.api import app



================================================
File: app/bet_placer.py
================================================
from playwright.async_api import Page

async def place_bet(page: Page, horse_number: int, bet_type: str, amount: float, mode: str = "simple"):
    print(f"Placing {bet_type} bet on horse #{horse_number} for €{amount} in mode {mode}")

    # Step 1: Select correct bet mode
    mode_label = {
        "simple": "Simple",
        "le_deuzio": "Le Deuzio",
        "le_boulet": "Le Boulet"
    }.get(mode.lower())

    if not mode_label:
        raise ValueError(f"Unsupported bet mode: {mode}")

    try:
        await page.get_by_text(mode_label, exact=True).first.click()
        print(f"✔ Clicked '{mode_label}' mode")
        await page.wait_for_timeout(500)
    except Exception:
        print(f"❌ Failed to click '{mode_label}' mode")
        return

    # Step 2: Locate the runner box
    runner_boxes = page.locator(".runner")
    count = await runner_boxes.count()
    matched_runner = None

    for i in range(count):
        box = runner_boxes.nth(i)
        num_el = box.locator(".number")
        if await num_el.inner_text() == str(horse_number):
            matched_runner = box
            break

    if matched_runner is None:
        print(f"❌ Horse #{horse_number} not found.")
        return

    # Step 3: Click the icon
    if bet_type.lower() == "gagnant":
        icon = matched_runner.locator("i[data-turf-bettype-id='1']")
    elif bet_type.lower() == "place":
        icon = matched_runner.locator("i[data-turf-bettype-id='2']")
    else:
        raise ValueError("Unsupported bet type. Use 'gagnant' or 'place'.")

    await icon.scroll_into_view_if_needed()
    await icon.wait_for(state="visible")
    await icon.click()

    # Step 4: Enter the amount
    stake_input = page.locator("input[name='stake']")
    await stake_input.wait_for()
    await stake_input.fill(str(amount))

    # Step 5: Parier and Confirmer
    await page.locator("span", has_text="Parier").click()
    await page.wait_for_timeout(500)
    await page.locator("span", has_text="Confirmer").click()

    print(f"✅ Bet placed on horse #{horse_number}")


================================================
File: app/browser.py
================================================
from playwright.async_api import async_playwright
from pathlib import Path
from dotenv import load_dotenv
load_dotenv(dotenv_path=Path(__file__).parent.parent / ".env")
import os
print("✅ UNIBET_USERNAME:", os.getenv("UNIBET_USERNAME"))
print("✅ UNIBET_PASSWORD:", os.getenv("UNIBET_PASSWORD"))


async def launch_browser(headless=True, login=True, username=None, password=None, race_url=None):
    if not username or not password:
        raise ValueError("Username or password not set. Check your .env file.")

    playwright = await async_playwright().start()
    browser = await playwright.chromium.launch(headless=headless)
    context = await browser.new_context()
    page = await context.new_page()

    # Step 1: Go to race page
    print("Navigating to race page...")
    await page.goto(race_url)

    # Step 2: Accept cookies
    try:
        print("Checking for cookie banner...")
        await page.wait_for_selector("button:has-text('Accepter')", timeout=5000)
        await page.click("button:has-text('Accepter')")
        print("✔ Cookie banner accepted")
    except:
        print("⚠ No cookie banner found")

    # Step 3: Fill birthdate modal (if shown before login)
    try:
        await page.wait_for_selector("input[name='birthdate']", timeout=5000)
        print("Filling birthdate modal...")
        await page.fill("input[name='birthdate']", "09/04/1987")
        await page.click("button:has-text('Valider')")
        print("✔ Birthday submitted")
    except:
        print("⚠ No birthdate modal found")

    # Step 4: Open login modal
    print("Opening login modal...")
    await page.click("text=Se connecter")

    # Step 5: Fill login form directly (no iframe!)
    try:
        print("Waiting for login fields...")
        await page.wait_for_selector("input[placeholder='Email ou pseudo']", timeout=10000)

        print("Filling login fields...")
        await page.fill("input[placeholder='Email ou pseudo']", username)
        await page.fill("input[placeholder='Mot de passe']", password)

        # Fill birthday before clicking login (this is mandatory)
        try:
            await page.wait_for_selector("input[name='birthday_date']", timeout=3000)
            print("Filling birthday before login...")
            await page.click("input[name='birthday_date']")
            await page.type("input[name='birthday_date']", "09/04/1987", delay=100)
        except:
            print("⚠ No birthday field present in login modal")

        print("Submitting login form...")
        try:
            await page.get_by_role("button", name="Connexion").click()
            print("✔ Clicked Connexion button using role selector")
        except:
            print("⚠ get_by_role failed — trying force click")
            await page.locator("button.btn.btn--large.btn--bold", has_text="Connexion").click(force=True)

        await page.wait_for_timeout(2000)  # Pause for visibility

        # Confirm login
        print("Waiting for login confirmation...")
        try:
            await page.wait_for_selector("text=Mon compte", timeout=10000)
            print("✅ Login successful")
        except:
            print("❌ Login may have failed — 'Mon compte' not found")

    except Exception as e:
        print("❌ Login may have failed:", str(e))

    return browser, context, page


================================================
File: app/main.py
================================================
from dotenv import load_dotenv
import os
from app.browser import launch_browser
from app.bet_placer import place_bet
from fastapi import FastAPI

# Load environment variables
load_dotenv()

UNIBET_USERNAME = os.getenv("UNIBET_USERNAME")
UNIBET_PASSWORD = os.getenv("UNIBET_PASSWORD")

# Example race URL and bets
RACE_URL = "https://www.unibet.fr/turf/race/14-05-2025-R8-C8-valparaiso-prix-golden-victory.html"

bets = [
    {
        "horse_number": 9,
        "horse_name": "Flash Lightning",
        "bet_type": "gagnant",
        "mode": "simple",
        "amount": 2.0
    },
    {
        "horse_number": 9,
        "horse_name": "Midnight Star",
        "bet_type": "place",
        "mode": "le_deuzio",
        "amount": 1.0
    }
]

async def main():
    browser, context, page = await launch_browser(
        headless=False,
        login=True,
        username=UNIBET_USERNAME,
        password=UNIBET_PASSWORD,
        race_url=RACE_URL
    )

    for bet in bets:
        await place_bet(
            page,
            horse_number=bet["horse_number"],
            bet_type=bet["bet_type"],
            amount=bet["amount"],
            mode=bet.get("mode", "simple")
        )
        await page.wait_for_timeout(3000)

    await browser.close()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

app = FastAPI()



================================================
File: app/models.py
================================================



